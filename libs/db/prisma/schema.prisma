generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  password          String
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id               String            @id @default(cuid())
  name             String?
  email            String?           @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  reportAggregator ReportAggregator?
  settings         Setting[]

  @@index([id, email])
}

model Setting {
  id          String  @id @default(cuid())
  name        String
  description String?
  value       Json

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
  @@index([userId])
}

model ReportAggregator {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  userId        String        @unique
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  weightEntries WeightEntry[]

  @@index([userId])
}

enum Measure {
  kg
  lb
}

model WeightEntry {
  id          String   @id @default(cuid())
  weight      Float
  measure     Measure  @default(kg)
  measureDate DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  reportAggregator   ReportAggregator @relation(fields: [reportAggregatorId], references: [id])
  reportAggregatorId String
}
