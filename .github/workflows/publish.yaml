name: Build and Publish artifact

on:
  pull_request:
    branches:
      - "main"
  push:
    branches:
      - "main"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}

jobs:
  build-and-publish:
    name: Build and publish
    runs-on: ubuntu-latest
    environment: prod
    strategy:
      fail-fast: false
      matrix:
        nodev: [20]
        pnpmv: [8]
        include:
          - dockerfile: ./packages/physlane/docker/Dockerfile
            image: ghcr.io/rolginroman/physlane/physlane-app
    permissions:
      contents: read
      packages: write
    env:
      IMG_NAME: ${{ github.repository }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{matrix.image}}
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        id: dockerbuild
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          file: ${{matrix.dockerfile}}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Pnpm setup
        uses: pnpm/action-setup@v2
        with:
            version: ${{ matrix.pnpmv }}
      - name: Use Node.js ${{ matrix.nodev }}
        uses: actions/setup-node@v3
        with:
            node-version: ${{ matrix.nodev }}
            cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Migrate DB
        run: pnpm exec nx publish db
      - name: Debug info
        run: echo ${{ steps.dockerbuild.outputs.imageid }} && echo ${{ steps.dockerbuild.outputs.digest }} && echo ${{ steps.dockerbuild.outputs.metadata }}
      # - name: Trigger deploy
      #   run: curl --data-urlencode ${{ secrets.RENDER_DEPLOY_HOOK_URL }} -d imgUrl $IMAGE_NAME
